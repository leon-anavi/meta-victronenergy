From 494f9aef38f46d6cfcddd8b1242336a0a3a79563 Mon Sep 17 00:00:00 2001
From: Izak Burger <iburger@victronenergy.com>
Date: Wed, 10 Jul 2024 12:59:22 +0200
Subject: [PATCH] fix a race condition

Service name should not be claimed on dbus before the service
is fully constructed, otherwise other services can end up
scanning a service that does not (yet) have all the mandatory
paths, or support all the dbus calls, causing such services
to be ignored by the GUI and others.

This fixes two issues:

1. GetItems on / is implemented the moment NameOwnerChanged
   is fired
2. /DeviceInstance is available immediately, which many
   consumers actually require.

https://github.com/victronenergy/venus-private/issues/410
---
 test/mock_dbus_service.py | 4 ++++
 vedbus.py                 | 9 +++++----
 2 files changed, 9 insertions(+), 4 deletions(-)

diff --git a/test/mock_dbus_service.py b/test/mock_dbus_service.py
index 471c801..c74937b 100644
--- a/test/mock_dbus_service.py
+++ b/test/mock_dbus_service.py
@@ -12,6 +12,10 @@ def add_path(self, path, value, description="", writeable=False, onchangecallbac
         if onchangecallback is not None:
             self._callbacks[path] = onchangecallback
 
+    def register(self):
+        # Nothing to do when mocking
+        pass
+
     # Add the mandatory paths, as per victron dbus api doc
     def add_mandatory_paths(self, processname, processversion, connection,
             deviceinstance, productid, productname, firmwareversion, hardwareversion, connected):
diff --git a/vedbus.py b/vedbus.py
index 4b73aa3..0407f6c 100644
--- a/vedbus.py
+++ b/vedbus.py
@@ -64,6 +64,7 @@ def __init__(self, servicename, bus=None):
 		self._dbusnodes = {}
 		self._ratelimiters = []
 		self._dbusname = None
+		self.name = servicename
 
 		# dict containing the onchange callbacks, for each object. Object path is the key
 		self._onchangecallbacks = {}
@@ -74,13 +75,13 @@ def __init__(self, servicename, bus=None):
 		# make the dbus connection available to outside, could make this a true property instead, but ach..
 		self.dbusconn = self._dbusconn
 
-		# Register ourselves on the dbus, trigger an error if already in use (do_not_queue)
-		self._dbusname = dbus.service.BusName(servicename, self._dbusconn, do_not_queue=True)
-
 		# Add the root item that will return all items as a tree
 		self._dbusnodes['/'] = VeDbusRootExport(self._dbusconn, '/', self)
 
-		logging.info("registered ourselves on D-Bus as %s" % servicename)
+	def register(self):
+		# Register ourselves on the dbus, trigger an error if already in use (do_not_queue)
+		self._dbusname = dbus.service.BusName(self.name, self._dbusconn, do_not_queue=True)
+		logging.info("registered ourselves on D-Bus as %s" % self.name)
 
 	# To force immediate deregistering of this dbus service and all its object paths, explicitly
 	# call __del__().
