server {
    listen 80 default_server;
    listen [::]:80 default_server;

    server_name _;
    root /var/www/venus;
    access_log off;
    error_log /dev/null;
    gzip_static always;

    index index.html index.php;
    error_page 401 403 =200 http://$host/auth/login.php?page=$request_uri;

    location ~ ^/auth/ {
        auth_request off;

        location ~ \.php$ {
            try_files $uri =404;
            fastcgi_pass unix:/var/run/php5-fpm.socket;
            include fastcgi.conf;
        }
    }

    location = @remoteconsole-authproxy {
        internal;
        auth_request off;

        proxy_pass http://localhost/auth/test.php?user=remoteconsole;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
    }

    auth_request @remoteconsole-authproxy;

    # Browsers still cache, but will always revalidate.
    add_header Cache-Control "no-cache";

    # proxy the websockify for VNC / remote console over https, so accepting the
    # certficate for https makes sure it can be reused for wss as well.
    location ~ ^/websockify$ {
        proxy_pass http://127.0.0.1:81;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_read_timeout 2147483s;
    }

    location ~ ^/websocket-mqtt$ {
        proxy_pass http://127.0.0.1:9001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
    }

    # This is needed because the wasm is downloaded as XHR. The proxying system
    # VRM uses, which also ends up here, has stricter rules and doesn't just
    # return 'origin', so add them here.
    location /gui {
        add_header Cache-Control "no-cache";
        add_header Access-Control-Allow-Origin "$http_origin";
        add_header Access-Control-Allow-Credentials true;
        add_header Vary "Content-Encoding, Access-Control-Allow-Origin, Access-Control-Allow-Credentials";
    }

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_pass unix:/var/run/php5-fpm.socket;
        include fastcgi.conf;
    }
}
